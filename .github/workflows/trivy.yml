name: Trivy Scan

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/trivy.yml"
  schedule:
    - cron: '30 17 * * 0'  # Runs every Sunday at 11:00 PM IST (5:30 PM UTC)

permissions:
  contents: read
  security-events: write

jobs:
  build:
    permissions:
      contents: read
      security-events: write
    name: Build
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db  # Restore previous cache if possible

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
          trivy --cache-dir ${HOME}/.cache/trivy  # Setup Trivy with cache directory

      - name: Set up GitHub Token for Trivy
        run: echo "GITHUB_TOKEN=${{ secrets.TOKEN }}" >> $GITHUB_ENV
      
      - name: Run Trivy vulnerability scanner with retry
        run: |
          export TRIVY_AUTH_URL="https://ghcr.io" 
          export TRIVY_TOKEN=$GITHUB_TOKEN 

          declare -A tags_with_platforms=(
            ["stable"]="linux/amd64"
            ["arm64"]="linux/arm64"
          )

          for tag in "${!tags_with_platforms[@]}"; do
            platform="${tags_with_platforms[$tag]}"
            echo "Scanning image: ghcr.io/rajanagori/nightingale:${tag} on platform ${platform}"
            for i in {1..5}; do
              trivy image \
                --platform "${platform}" \
                --skip-dirs /home/wordlist \
                --skip-files home/tools_web_vapt/WhatWeb/plugins/IpToCountry.csv \
                --format sarif \
                --output "trivy-results-${tag}.sarif" \
                --severity CRITICAL \
                "ghcr.io/rajanagori/nightingale:${tag}" && break || sleep 60
            done
          done

      # - name: Run Trivy vulnerability scanner with retry
      #   run: |
      #     export TRIVY_AUTH_URL="https://ghcr.io" 
      #     export TRIVY_TOKEN=$GITHUB_TOKEN 
      #     for i in {1..5}; do  # Retry mechanism for handling rate limits
      #       trivy image --skip-dirs /home/wordlist --skip-files home/tools_web_vapt/WhatWeb/plugins/IpToCountry.csv --format sarif --output trivy-results.sarif --severity CRITICAL ghcr.io/rajanagori/nightingale:stable && break || sleep 60;
      #     done

      # - name: Generate SBOM  # Generate Software Bill of Materials (SBOM)
      #   run: |
      #     trivy sbom --format spdx-json --scanners vuln --output sbom.json ghcr.io/rajanagori/nightingale:stable

      - name: Verify SARIF files
        run: |
          echo "Checking SARIF files..."
          ls -la

      - name: Upload Trivy scan results to GitHub Security tab 
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-stable.sarif,trivy-results-arm64.sarif'

      # - name: Upload Trivy results artifact  
      #   uses: actions/upload-artifact@v4  
      #   with:
      #     name: trivy-results 
      #     path: |
      #       trivy-results.sarif
      #       sbom.json  